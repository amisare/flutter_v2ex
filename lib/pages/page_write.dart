import 'package:flutter_smart_dialog/flutter_smart_dialog.dart';
import 'package:get/get.dart';
import 'package:flutter/material.dart';
import 'package:flutter_v2ex/http/dio_web.dart';
import 'package:flutter_v2ex/models/network/item_node_topic.dart';

enum SampleItem { draft, cancel, tips }

class WritePage extends StatefulWidget {
  const WritePage({Key? key}) : super(key: key);

  @override
  State<WritePage> createState() => _WritePageState();
}

class _WritePageState extends State<WritePage> {
  final TextEditingController titleController = TextEditingController();
  final TextEditingController contentController = TextEditingController();
  final GlobalKey _formKey = GlobalKey<FormState>();

  final FocusNode titleTextFieldNode = FocusNode();
  final FocusNode contentTextFieldNode = FocusNode();

  String title = '';
  String content = '';
  String syntax = 'default'; // ËØ≠Ê≥ï default markdown
  TopicNodeItem? currentNode;

  // Êé•Êî∂Âà∞ÁöÑÂèÇÊï∞
  String source = '';
  String topicId = '';

  @override
  void initState() {
    // TODO: implement initState
    super.initState();
    if (Get.parameters.isNotEmpty) {
      source = Get.parameters['source']!;
      topicId = Get.parameters['topicId']!;
    }
    print('source: $source');
    if (source == 'edit') {
      // Êü•ËØ¢ÁºñËæëÁä∂ÊÄÅÂèäÂÜÖÂÆπ
      queryTopicStatus();
    }
    if (source == 'append') {
      // Êü•ËØ¢ÈôÑË®ÄÁä∂ÊÄÅ
      queryAppendStatus();
    }
  }

  // ÊòØÂê¶ÂèØÁºñËæë
  void queryTopicStatus() async {
    var res = await DioRequestWeb.queryTopicStatus(topicId);
    if (res['status']) {
      // ÂèØ‰ª•ÁºñËæëÔºåÊ∏≤ÊüìÂÜÖÂÆπ
      Map topicDetail = res['topicDetail'];
      print("üòätopicDetail: ${topicDetail['topicTitle']}");
      String topicTitle = topicDetail['topicTitle'];
      String topicContent = topicDetail['topicContent'];
      String syntax = topicDetail['syntax'];
      titleController.text = topicTitle;
      contentController.text = topicContent;
      setState(() {
        syntax = syntax;
      });
    } else {
      if (context.mounted) {
        showDialog(
          context: context,
          builder: (context) {
            return AlertDialog(
              title: const Text('ÊèêÁ§∫'),
              content: const Text('‰Ω†‰∏çËÉΩÁºñËæëËøô‰∏™‰∏ªÈ¢ò„ÄÇ'),
              actions: [
                TextButton(
                    onPressed: () {
                      // ÂÖ≥Èó≠ dialog
                      Navigator.pop(context);
                      // ÂÖ≥Èó≠ page
                      Navigator.pop(context, {'refresh': true});
                    },
                    child: const Text('ËøîÂõû'))
              ],
            );
          },
        );
      }
    }
  }

  // ÊòØÂê¶ÂèØ‰ª•Â¢ûÂä†ÈôÑË®Ä
  void queryAppendStatus() async {
    var res = await DioRequestWeb.appendStatus(topicId);
    if(!res) {
      if(context.mounted) {
        showDialog(
          context: context,
          builder: (context) {
            return AlertDialog(
              title: const Text('ÊèêÁ§∫'),
              content: const Text('‰∏çÂèØ‰∏∫ËØ•‰∏ªÈ¢òÂ¢ûÂä†ÈôÑË®Ä'),
              actions: [
                TextButton(
                    onPressed: () {
                      // ÂÖ≥Èó≠ dialog
                      Navigator.pop(context);
                      // ÂÖ≥Èó≠ page
                      Navigator.pop(context);
                    },
                    child: const Text('ËøîÂõû'))
              ],
            );
          },
        );
      }

    }
  }

  void appendDialog() {
    showDialog(context: context, builder: (context) {
      return AlertDialog(
        title: const Text('ÂÖ≥‰∫é‰∏∫‰∏ªÈ¢òÂàõÂª∫ÈôÑË®Ä'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: const[
            Text('- ËØ∑Âú®Á°ÆÊúâÂøÖË¶ÅÁöÑÊÉÖÂÜµ‰∏ãÂÜç‰ΩøÁî®Ê≠§ÂäüËÉΩ‰∏∫Âéü‰∏ªÈ¢òË°•ÂÖÖ‰ø°ÊÅØ'),
            Text('- ÊØè‰∏™‰∏ªÈ¢òËá≥Â§öÂèØ‰ª•ÈôÑÂä† 3 Êù°ÈôÑË®Ä'),
            Text('- ÂàõÂª∫ÈôÑË®Ä‰ª∑Ê†º‰∏∫ÊØèÂçÉÂ≠ó 20 ÈìúÂ∏Å'),
            // Text('- ÊØè‰∏™‰∏ªÈ¢òËá≥Â§öÂèØ‰ª•ÈôÑÂä† 3 Êù°ÈôÑË®Ä'),
            // Text('- ÂàõÂª∫ÈôÑË®Ä‰ª∑Ê†º‰∏∫ÊØèÂçÉÂ≠ó 20 ÈìúÂ∏Å'),
          ],
        ),
        actions: [
          TextButton(onPressed: ()=>Navigator.pop(context), child: const Text('‰∫ÜËß£‰∫Ü'))
        ],
      );
    });
  }

  void onSubmit() {
    switch (source) {
      case '':
        onPost();
        break;
      case 'edit':
        onEdit();
        break;
      case 'append':
        onAppend();
        break;
      default:
        onPost();
    }
  }

  Future onPost() async{
    if (currentNode == null) {
      SmartDialog.showToast('ËØ∑ÈÄâÊã©ËäÇÁÇπ', alignment: Alignment.center);
      return;
    }
    if ((_formKey.currentState as FormState).validate()) {
      //È™åËØÅÈÄöËøáÊèê‰∫§Êï∞ÊçÆ
      (_formKey.currentState as FormState).save();
      // ÈîÆÁõòÊî∂Ëµ∑
      contentTextFieldNode.unfocus();
      var args = {
        'title': title,
        'syntax': syntax,
        'content': content,
        'node_name': currentNode!.name,
      };
      var result = await DioRequestWeb.postTopic(args);
      if (result != false) {
        if (context.mounted) {
          showDialog(
            context: context,
            builder: (context) {
              return AlertDialog(
                title: const Text('ÂèëÂ∏ÉÊàêÂäü'),
                content: const Text('‰∏ªÈ¢òÂèëÂ∏ÉÊàêÂäüÔºåÊòØÂê¶ÂâçÂæÄÊü•Áúã'),
                actions: [
                  // TextButton(
                  //     onPressed: () {
                  //       Navigator.pop(context);
                  //       Get.back();
                  //     },
                  //     child: const Text('ËøîÂõû‰∏ä‰∏ÄÈ°µ')),
                  TextButton(
                      onPressed: () {
                        Get.offAndToNamed(result);
                      },
                      child: const Text('ÂéªÊü•Áúã'))
                ],
              );
            },
          );
        }
      }
    }
  }

  // ÁºñËæë‰∏ªÈ¢ò
  Future onEdit() async{
    if ((_formKey.currentState as FormState).validate()) {
      //È™åËØÅÈÄöËøáÊèê‰∫§Êï∞ÊçÆ
      (_formKey.currentState as FormState).save();
      // ÈîÆÁõòÊî∂Ëµ∑
      contentTextFieldNode.unfocus();
      var args = {
        'title': title,
        'syntax': syntax == 'default' ? 0 : 1,
        'content': content,
        'topicId': topicId
      };
      var result = await DioRequestWeb.eidtTopic(args);
      if (result) {
        if (context.mounted) {
          showDialog(
            context: context,
            builder: (context) {
              return AlertDialog(
                title: const Text('ÁºñËæëÊàêÂäü'),
                content: const Text('‰∏ªÈ¢òÁºñËæëÊàêÂäüÔºåÊòØÂê¶ÂâçÂæÄÊü•Áúã'),
                actions: [
                  TextButton(
                      onPressed: () {
                        // ËøîÂõû‰∏ªÈ¢òËØ¶ÊÉÖÈ°µÂπ∂Âà∑Êñ∞
                        Navigator.pop(context, {'refresh', true});
                      },
                      child: const Text('ÂéªÊü•Áúã'))
                ],
              );
            },
          );
        }
      }else{
        SmartDialog.show(
          useSystem: true,
          animationType: SmartAnimationType.centerFade_otherSlide,
          builder: (BuildContext context) {
            return AlertDialog(
              title: const Text('ÊèêÁ§∫'),
              content: const Text('‰Ω†‰∏çËÉΩÁºñËæëËøô‰∏™‰∏ªÈ¢ò„ÄÇ'),
              actions: [
                TextButton(
                    onPressed: () {
                      Navigator.pop(context);
                      Get.back();
                    },
                    child: const Text('Á°ÆÂÆö'))
              ],
            );
          },
        );
      }
    }
  }

  // Ê∑ªÂä†ÈôÑË®Ä
  Future onAppend() async{
    if ((_formKey.currentState as FormState).validate()) {
      //È™åËØÅÈÄöËøáÊèê‰∫§Êï∞ÊçÆ
      (_formKey.currentState as FormState).save();
      // ÈîÆÁõòÊî∂Ëµ∑
      contentTextFieldNode.unfocus();
      var args = {
        'syntax': syntax == 'default' ? 0 : 1,
        'content': content,
        'topicId': topicId
      };
      var result = await DioRequestWeb.appendContent(args);
      if (result) {
        if (context.mounted) {
          SmartDialog.showToast('ÂèëÂ∏ÉÊàêÂäü', displayTime: const Duration(milliseconds: 800)).then((value) {
            Get.back(result: {'refresh': true});
          });
        }
      }else{

      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(source == 'edit' ? 'ÁºñËæë‰∏ªÈ¢òÂÜÖÂÆπ' : source == 'append' ? 'Â¢ûÂä†ÈôÑË®Ä' : 'Âàõ‰ΩúÊñ∞‰∏ªÈ¢ò'),
        actions: [
          IconButton(
              onPressed: () => onSubmit(),
              icon: const Icon(Icons.send),
              tooltip: 'ÂèëÂ∏É'),
          if(source == 'append')
            IconButton(
                onPressed: ()=> appendDialog(), icon: const Icon(Icons.info_outline_rounded)),
            const SizedBox(width: 10),
          // if(source != 'append')
          // PopupMenuButton<SampleItem>(
          //   icon: const Icon(Icons.more_vert),
          //   tooltip: 'action',
          //   itemBuilder: (BuildContext context) =>
          //   <PopupMenuEntry<SampleItem>>[
          //     PopupMenuItem<SampleItem>(
          //       value: SampleItem.draft,
          //       onTap: () {},
          //       child: const Text('‰øùÂ≠òËçâÁ®ø'),
          //     ),
          //     PopupMenuItem<SampleItem>(
          //       value: SampleItem.cancel,
          //       onTap: () {},
          //       child: const Text('ËàçÂºÉ'),
          //     ),
          //     PopupMenuItem<SampleItem>(
          //       value: SampleItem.tips,
          //       onTap: () {},
          //       child: const Text('ÂèëÂ∏ñÊèêÁ§∫'),
          //     ),
          //   ],
          // ),
        ],
      ),
      body: Form(
        key: _formKey, //ËÆæÁΩÆglobalKeyÔºåÁî®‰∫éÂêéÈù¢Ëé∑ÂèñFormState
        autovalidateMode: AutovalidateMode.disabled,
        child: Column(
          children: [
            if(source == '') ... [
              InkWell(
                onTap: () async {
                  var result = await Get.toNamed('/topicNodes');
                  setState(() {
                    currentNode = result['node'];
                  });
                },
                child: Container(
                    padding:
                    const EdgeInsets.symmetric(horizontal: 12, vertical: 20),
                    decoration: BoxDecoration(
                        border: Border(
                            bottom: BorderSide(
                                color: Theme
                                    .of(context)
                                    .dividerColor
                                    .withOpacity(0.2)))),
                    child: Row(
                      children: [
                        Text(
                          '‰∏ªÈ¢òËäÇÁÇπ:',
                          style: Theme
                              .of(context)
                              .textTheme
                              .titleMedium,
                        ),
                        const SizedBox(width: 20),
                        Text(
                          currentNode != null ? currentNode!.title! : 'ÈÄâÊã©ËäÇÁÇπ',
                          style: Theme
                              .of(context)
                              .textTheme
                              .titleMedium!
                              .copyWith(
                              color: Theme
                                  .of(context)
                                  .colorScheme
                                  .primary),
                        ),
                      ],
                    )),
              ),
            ],
            if(source != 'append')
            Container(
              padding: const EdgeInsets.fromLTRB(12, 10, 12, 5),
              decoration: BoxDecoration(
                  border: Border(
                      bottom: BorderSide(
                          color: Theme
                              .of(context)
                              .dividerColor
                              .withOpacity(0.2)))),
              child: TextFormField(
                autofocus: true,
                controller: titleController,
                focusNode: titleTextFieldNode,
                decoration: const InputDecoration(
                  hintText: "‰∏ªÈ¢òÊ†áÈ¢ò",
                  enabledBorder: InputBorder.none,
                  focusedBorder: InputBorder.none,
                ),
                // Ê†°È™åÁî®Êà∑Âêç
                validator: (v) {
                  return v!.trim().isNotEmpty ? null : "ËØ∑ËæìÂÖ•‰∏ªÈ¢òÊ†áÈ¢ò";
                },
                onSaved: (val) {
                  title = val!;
                },
              ),
            ),
            Expanded(
              child: Container(
                padding:
                const EdgeInsets.symmetric(horizontal: 12, vertical: 5),
                child: TextFormField(
                  controller: contentController,
                  minLines: 1,
                  maxLines: null,
                  decoration: InputDecoration(
                      hintText: source == 'append' ? 'ËæìÂÖ•ÈôÑË®ÄÂÜÖÂÆπ' : 'ËæìÂÖ•Ê≠£ÊñáÂÜÖÂÆπ', border: InputBorder.none),
                  style: Theme
                      .of(context)
                      .textTheme
                      .bodyLarge,
                  validator: (v) {
                    return v!.trim().isNotEmpty ? null : "ËØ∑ËæìÂÖ•Ê≠£ÊñáÂÜÖÂÆπ";
                  },
                  onSaved: (val) {
                    content = val!;
                  },
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
